/* Explicit list + First fit + LIFO has 82/100 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "duile",
    /* First member's full name */
    "Duile",
    /* First member's email address */
    "https://www.cnblogs.com/duile",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8
/* Basic constants and macros */
#define WSIZE		4		/* Word and header/footer size (bytes) */ 
#define DSIZE		8		/* Double word size (bytes) */
#define CHUNKSIZE	(1<<12)	/* Extend heap by this amount (bytes) */

/* use for mm_malloc to ensure memory of MAX */
#define MAX(x, y)	((x) > (y)) ? (x) : (y) 

/* Read and write a word at address p */
#define GET(p)       (*(unsigned int *)(p))            
#define PUT(p, val)  (*(unsigned int *)(p) = (val))

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc)	((size) | (alloc))

/* Read the size and allocated fields from address p*/
#define GET_SIZE(p)		(GET(p) & ~0x7)
#define GET_ALLOC(p)	(GET(p) & 0x1)	

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)       ((char *)(bp) - WSIZE)                      
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) 

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) 
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE))) 

/* Given block ptr bp, compute value of its succ and pred */
#define GET_SUCC(bp) 		(*(unsigned int *)(bp))
#define GET_PRED(bp) 		(*((unsigned int *)(bp) + 1))

/* Put a value at address of succ and pred */
#define PUT_SUCC(bp, val) 	(GET_SUCC(bp) = (unsigned int)(val))
#define PUT_PRED(bp, val) 	(GET_PRED(bp) = (unsigned int)(val))


/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) 	((DSIZE) * (((size) + (DSIZE) + (DSIZE-1)) / (DSIZE)))

/* Global variables */
static char* heap_listp = 0;	/* Pointer to first block */
static char* efree_listp = 0;	/* Pointer to first free block */	

/* Function prototypes for internal helper routines */
static void *extend_heap(size_t words);
static void place(void *bp, size_t asize);
static void *find_fit(size_t asize);
static void *coalesce(void *bp);

/* Helper function */
static void insert(void *new_first);
static void remove_s_p(void *bp);

/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{	
	/* Create the initial empty heap */
	/* get heap_list_ptr and store start address to memory of increasing */
	if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1)
		return -1;
	PUT(heap_listp, 0);                          /* Alignment padding */
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1)); /* Prologue header */ 
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1)); /* Prologue footer */ 
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));     /* Epilogue header */
    heap_listp += (2*WSIZE);					 /* pointer to Prologue footer */
	
	/* Initialize efree_listp */
	efree_listp = NULL;							 
	
    /* Extend the empty heap with a free block of CHUNKSIZE bytes */
    if (extend_heap(CHUNKSIZE/WSIZE) == NULL) 
        return -1;	
    return 0;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
    size_t asize;      /* Adjusted block size */
    size_t extendsize; /* Amount to extend heap if no fit */
    char *bp;      
	
	/* Ignore spurious requests */
    if (size == 0)
        return NULL;

    /* Adjust block size to include overhead and alignment reqs. */
    if (size <= DSIZE)                                          
        asize = 2*DSIZE;                                        
    else
        asize = ALIGN(size); 

    /* Search the free list for a fit */
    if ((bp = find_fit(asize)) != NULL) {  
        place(bp, asize);                  
        return bp;
    }

    /* No fit found. Get more memory and place the block */
    extendsize = MAX(asize, CHUNKSIZE);                 
    if ((bp = extend_heap(extendsize/WSIZE)) == NULL)  
        return NULL;                                  
    place(bp, asize);                                 
    return bp;	
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{	
    size_t size = GET_SIZE(HDRP(ptr));
	
    PUT(HDRP(ptr), PACK(size, 0));
    PUT(FTRP(ptr), PACK(size, 0));
    PUT_PRED(ptr, NULL);
    PUT_SUCC(ptr, NULL);
    coalesce(ptr);
}

/*
 * remove_s_p - change pointer of succ and pred.
 */
static void remove_s_p(void *bp)
{
    void* pred = GET_PRED(bp);
    void* succ = GET_SUCC(bp);

    PUT_PRED(bp, NULL);
    PUT_SUCC(bp, NULL);

    if (pred == NULL && succ == NULL)   /* NULL-> bp ->NULL */
    {
        efree_listp = NULL;
    }
    else if (pred == NULL)              /* NULL-> bp ->FREE_BLK */
    {
        PUT_PRED(succ, NULL);           /* as the first block */
        efree_listp = succ;
    }
    else if (succ == NULL)              /* FREE_BLK-> bp ->NULL */                 
    {
        PUT_SUCC(pred, NULL);
    }
    else                                /* FREE_BLK-> bp ->FREE_BLK */
    {
        PUT_SUCC(pred, succ);
        PUT_PRED(succ, pred);
    } 
}

	
/*
 * insert - FILO: getting a newest free block as the first free block.
 */
static void insert(void *new_first)
{	
    /* First insert */
    if (efree_listp == NULL){
        efree_listp = new_first;
        return;
    }

    /* efree_list -> insert -> succ */
	void* old_first = efree_listp;

	PUT_SUCC(new_first, old_first);
	PUT_PRED(new_first, NULL);
	PUT_PRED(old_first, new_first);
	
	efree_listp = new_first;	
}

/* 
 * place - Place block of asize bytes at start of free block bp 
 *         and split if remainder would be at least minimum block size
 */
static void place(void *bp, size_t asize)
{
    size_t bsize = GET_SIZE(HDRP(bp));

    /* when a free bloc be allocted, we must remove it */   
    remove_s_p(bp);

    if ((bsize - asize) >= (2*DSIZE)) { 
        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));
        
        /* bp: Remainder of block */
        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(bsize-asize, 0));
        PUT(FTRP(bp), PACK(bsize-asize, 0));
        PUT_SUCC(bp, NULL);
        PUT_PRED(bp, NULL);
        coalesce(bp);
    }
    else {
        PUT(HDRP(bp), PACK(bsize, 1));
        PUT(FTRP(bp), PACK(bsize, 1));
    }
}

/* 
 * find_fit - Find a fit for a block with asize bytes 
 */
static void *find_fit(size_t asize)
{
    /* First-fit search */
    void *bp;

	/* bp equal 0 ==> not more free block */
    for (bp = efree_listp; bp != NULL; bp = GET_SUCC(bp)) {
        if (asize <= GET_SIZE(HDRP(bp))) {
            return bp;
        }
    }
    return NULL; /* No fit */
}

/*
 * coalesce - Boundary tag coalescing. Return ptr to coalesced block
 */
static void *coalesce(void *bp) 
{
    size_t prev_alloc = GET_ALLOC(HDRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev_alloc && next_alloc) {            /* alloc-> bp ->alloc */
		/* then we will insert(bp) */
    }

    else if (prev_alloc && !next_alloc) {      /* alloc-> bp ->free */
        remove_s_p(NEXT_BLKP(bp));
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size,0));
    }

    else if (!prev_alloc && next_alloc) {      /* free-> bp ->alloc */
        remove_s_p(PREV_BLKP(bp));
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);					   /* prev block as first free block */
    }

    else {                                     /* free-> bp ->free */
        remove_s_p(NEXT_BLKP(bp));
        remove_s_p(PREV_BLKP(bp));
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + 
            GET_SIZE(FTRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    
    insert(bp);
    
    return bp;
}

/* 
 * extend_heap - Extend heap with free block and return its block pointer
 */
static void *extend_heap(size_t words) 
{
    char *bp;
    size_t size;

    /* Allocate an even number of words to maintain alignment */
    size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; 
    if ((long)(bp = mem_sbrk(size)) == -1)  
        return NULL;                                        
	
    /* Initialize free block header/footer and the epilogue header */
    PUT(HDRP(bp), PACK(size, 0));         /* Free block header */   
    PUT(FTRP(bp), PACK(size, 0));         /* Free block footer */                                    
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); /* New epilogue header */ 

	/* Initialize explicit free list ptr: efree_listp, succ and pred */
	PUT_SUCC(bp, 0);			/* Free block succ */          
	PUT_PRED(bp, 0);	  		/* Free block pred */

	/* Coalesce if the previous block was free */				
	return coalesce(bp);
}

/*
 * mm_realloc - Naive implementation of realloc
 */
void *mm_realloc(void *ptr, size_t newsize)
{
    size_t oldsize;
    void *newptr;

    /* If size == 0 then this is just free, and we return NULL. */
    if(newsize == 0) {
        mm_free(ptr);
        return 0;
    }

    /* If oldptr is NULL, then this is just malloc. */
    if(ptr == NULL) {
        return mm_malloc(newsize);
    }
	
	/* begain change the size of block that be pointered by ptr */
	/* mm_malloc() fails equals realloc() fails */
    newptr = mm_malloc(newsize);

    /* If realloc() fails the original block is left untouched  */
    if(!newptr) {
        return 0;
    }

    /* Copy the old data. */
    /* 
    Only copy the data, 
    if old data bigger than new data, 
    size of oldblock change to equal newblock, 
    but old data equal or smaller than new data, 
    size of oldblock not change 
    */
    oldsize = GET_SIZE(HDRP(ptr));
    if(newsize < oldsize) 
    	oldsize = newsize;
    memcpy(newptr, ptr, oldsize);

    /* Free the old block. */
    mm_free(ptr);

    return newptr;
}






